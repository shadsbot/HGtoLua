"""
HG MetaData Extractor
Last Updated: 1/31/2018
Requirements: Python 2.7, python-hglib
"""

import sys
import hglib

if len(sys.argv) > 1:
    try:
        repo = hglib.open(sys.argv[1])
    except:
        print("There was an error opening that repo. Does it exist?")
        print(sys.argv[1])
else:
    try:
        repo = hglib.open('.')
    except:
        print("No repo specified and none in working directory. Hint: This script accepts one parameter to point to the hg repo.")

# Get current changeset, revision, and branch, strip the \n
data = repo.rawcommand(['id','-nib'])[:-1].split(' ')
# And the tags
data.append(repo.rawcommand(['id','-t'])[:-1] )

# Apparently the log can print out everything and make it perfect for parsing??
logdata = repo.rawcommand(['log','--template','{desc|firstline}\n{date|shortdate}\n{author|user}','-r',data[1]]).split('\n')

data.append(logdata[2]) # author
data.append(logdata[1]) # date
data.append(logdata[0]) # summary

# Where do we actually stash this file
if len(sys.argv) > 2:
    output = sys.argv[2]
else:
    output = 'cl_versioninfo.lua'

f = open(output,'w') # overwrite file if exist
f.write("""--[[
    This file is used to identify the branch, version, date, etc of our repository.
]]

-- File automatically generated by trhg.py
GM.Branch = "{2}"
GM.Changeset = "{0}"
GM.RevNumber = "{1}"
GM.ChangeDate = "{5}"
GM.RevAuthor = "{4}"
GM.RevTags = "{3}"
GM.RevSummary = "{6}"
""".format(*data) )

f.close()
