"""
HG MetaData Extractor
Last Updated: 5/2/2018
Requirements: Python 2.7
"""

import os
import sys
import subprocess
import json
import datetime
import platform

# Attempt to find an HG repo
if len(sys.argv) > 1:
    path = sys.argv[1]
    if not path[-1:] == '/':
        path = path + "/"
    if not os.path.isfile(path + ".hg/hgrc"):
        print("err: Could not find an hg repo at " + path + ".hg/hgrc")
        exit(1)

# Create a backup of working dir, move to "path"
wd = os.getcwd()
os.chdir(path)
if (platform.system() == "Linux"):
    data = subprocess.check_output(['hg id -nib '], shell=True).split(' ')
else:
    data = subprocess.check_output(['hg', 'id', '-nib'], shell=True).split(' ')

data[2] = data[2].replace('\n','')

# Apparently log can output in JSON format
try:
    if (platform.system() == "Linux"):
        logdata = subprocess.check_output(['hg log -Tjson -r ' + data[0].replace('+','')], shell=True)
    else:
        logdata = subprocess.check_output(['hg', 'log', '-Tjson', '-r' + data[0].replace('+','')], shell=True)
except subprocess.CalledProcessError as g:
    print("e: ", g.returncode, g.output, data[1])

logdata = json.loads(logdata.replace('\n',''))[0]

# tags, author, date, summary, and bookmarks
data.append(logdata['tags'])
data.append(logdata['user'])
data.append(datetime.datetime.fromtimestamp(logdata['date'][0]).strftime('%Y-%m-%d'))
data.append(logdata['desc'].replace('"','\\"'))
data.append(logdata['bookmarks'])

# Where do we actually stash this file
os.chdir(wd) # Preserve relative paths
if len(sys.argv) > 2:
    os.chdir(sys.argv[2])
# What to name this file
if len(sys.argv) > 3:
    output = sys.argv[3]
else:
    output = "cl_versioninfo.lua" # Default name

# Tags and bookmarks are still arrays
data[7] = " ".join(data[7])
data[3] = " ".join(data[3])

# Stop revision summary at 160 chars or newline, whichever comes first
newlineLocation = data[6].find("\n")
if (newlineLocation != -1):
    data[6] = data[6][:newlineLocation]
data[6] = data[6][:160]

f = open(output,'w') # overwrite file if exist
f.write("""--[[
    This file is used to identify the branch, version, date, etc of our repository.
]]

-- File automatically generated by trhg.py
GM.Branch = "{2}"
GM.Changeset = "{0}"
GM.RevNumber = "{1}"
GM.ChangeDate = "{5}"
GM.RevAuthor = "{4}"
GM.RevTags = "{3}"
GM.Bookmarks = "{7}"
GM.RevSummary = "{6}"
""".format(*data) )

f.close()
